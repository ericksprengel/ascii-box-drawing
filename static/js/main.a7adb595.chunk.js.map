{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_TABLE","map","line","Array","from","isPointEqual","p1","p2","Boolean","x","y","Cell","char","point","selected","onMouseDown","onMouseOver","onMouseUp","onDblClick","width","height","fill","radius","fontSize","fontFamily","text","align","verticalAlign","evt","BOX_CHARS","BOX_CHARS_PROPS","BOX_CHARS_FROM_PROPS","App","useState","startPoint","setStartPoint","endPoint","setEndPoint","selectedPoint","setSelectedPoint","shiftKeyPressed","setShiftKeyPressed","setAltKeyPressed","table","setTable","mergeChars","char1","char2","includes","getChar","boxChars","handleOnMouseDown","handleOnMouseOver","handleOnMouseUp","row","undefined","handleOnDblClick","tabIndex","onKeyDown","preventDefault","console","log","key","onKeyUp","t2","reduce","acc","join","window","innerWidth","innerHeight","onKey","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7adb595.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Line, Rect, Shape, Text, Circle } from 'react-konva';\nimport Konva from 'konva';\nimport { KonvaEventObject } from 'konva/types/Node'\n\n/**\n * it should be Brick XD, because you can't do everything like an\n * adobe does.\n * Why XD? The Experience is not so good, it's just a smille XD\n * There is only one thing that reminds me a designer...\n * The code. The code looks like it was developed by a desiner.\n * \n */\n\n\nconst INITIAL_TABLE = [\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n  '                                                ',\n].map((line) => Array.from(line))\n \n//  const INITIAL_TABLE = [\n//   ' ┌────────────────────────────────────────────┐',\n//   ' │  ┌───┐ Cardápio                            │▒',\n//   ' │  │   │                                     │▒',\n//   ' │  │ 1 │ Frango à Parmegiana                 │▒',\n//   ' │  │   │ Guarnição: Arroz Branco e Feijão    │▒',\n//   ' │  │   │ Mistura: Filé de frango à parmegiana│▒',\n//   ' │  │   │ Acompanhamento: Purê de batata      │▒',\n//   ' │  └─┬─┘                                     │▒',\n//   ' ├─┬──┴──┬────────────────────────────────────┤▒',\n//   ' │ │     │ ▄▄▄▄▄▄▄  ▄ ▄▄ ▄▄▄▄▄▄▄              │▒',\n//   ' │ │     │ █ ▄▄▄ █ ██ ▀▄ █ ▄▄▄ █              │▒',\n//   ' │ │     │ █ ███ █ ▄▀ ▀▄ █ ███ █              │▒',\n//   ' │ │     │ █▄▄▄▄▄█ █ ▄▀█ █▄▄▄▄▄█              │▒',\n//   ' │ │     │ ▄▄ ▄  ▄▄▀██▀▀ ▄▄▄ ▄▄               │▒',\n//   ' │ │     │ ▄▄▀ █ ▄▄ ▄▄ ▄▄▀▀ ▄▄▀█              │▒',\n//   ' │ │     │ █ ▄▀█ ▄▀▄█ ▀▄ ▄ ▄  ██              │▒',\n//   ' │ │     │ ▄▄▄▄▄▄▄ █▀▀▀ ▄ ▀▄█▄█               │▒',\n//   ' │ │     │ █ ▄▄▄ █  ▄▀█▀▀▄▄█ ▄ █              │▒',\n//   ' │ │     │ █ ███ █ ▀ █▀▄  ██▄▄▀█              │▒',\n//   ' │ │     │ █▄▄▄▄▄█ █▀▀▄▄▀▀▄▀▄ ▄               │▒',\n//   ' │ ├──┬──┤  ┌┬┐                               │▒',\n//   ' │ └──┴──┘  ├┼┤                               │▒',\n//   ' └──────────┴┴┴───────────────────────────────┘▒',\n// ].map((line) => Array.from(line))\n\n// const INITIAL_TABLE = [\n//  ' ┌───────────────────┐ ',\n//  ' │  ╔═══╗ Some Text  │▒',\n//  ' │  ╚═╦═╝ in the box │▒',\n//  ' ╞═╤══╩══╤═══════════╡▒',\n//  ' │ ├──┬──┤  ┌┬┐      │▒',\n//  ' │ └──┴──┘  ├┼┤      │▒',\n//  ' └──────────┴┴┴──────┘▒',\n// ].map((line) => Array.from(line))\n\nconst CELL_WIDTH = 25\nconst CELL_HEIGHT = 51\n\ntype BoxChar = '┌' |'├' |'└' |'┬' |'┼' |'┴' |'┐' |'┤' |'┘' |'─' |'│'\ntype Char = BoxChar | string\n\ninterface Point {\n  x: number\n  y: number\n}\n\nconst isPointEqual = (p1?: Point, p2?: Point): boolean =>\n  Boolean(p1 && p2 && p1.x === p2.x && p1.y === p2.y)\n\ntype BxdMouseEvent = KonvaEventObject<MouseEvent>\ntype OnEventCallback = (point: Point, e: BxdMouseEvent) => void\n\ninterface CellProps {\n  char?: string\n  point: Point\n  selected: boolean\n  onMouseDown: OnEventCallback\n  onMouseOver: OnEventCallback\n  onMouseUp: OnEventCallback\n  onDblClick: OnEventCallback\n}\n\nconst Cell: React.FC<CellProps> = ({\n  char = '',\n  point,\n  selected,\n  onMouseDown,\n  onMouseOver,\n  onMouseUp,\n  onDblClick,\n}) => {\n  return (\n    <>\n    <Rect\n      x={point.x*CELL_WIDTH}\n      y={point.y*CELL_HEIGHT}\n      width={CELL_WIDTH}\n      height={CELL_HEIGHT}\n      fill={selected ? '#ddd' : '#fff'}\n    />\n    <Circle\n      x={point.x*CELL_WIDTH}\n      y={point.y*CELL_HEIGHT}\n      radius={1}\n      fill={'#888'}\n    />\n      <Text\n        fontSize={40}\n        fontFamily=\"Courier\"\n        text={char}\n        x={point.x*CELL_WIDTH}\n        y={point.y*CELL_HEIGHT}\n        fill=\"#000\"\n        width={CELL_WIDTH}\n        height={CELL_HEIGHT}\n        align=\"center\"\n        verticalAlign=\"middle\"\n        onMouseDown={(evt) => onMouseDown(point, evt)}\n        onMouseOver={(evt) => onMouseOver(point, evt)}\n        onMouseUp={(evt) => onMouseUp(point, evt)}\n        onDblClick={(evt) => onDblClick(point, evt)}\n      />\n    </>\n  )\n}\n\n\nconst BOX_CHARS: BoxChar[] = [\n  '┌',\n  '├',\n  '└',\n  '┬',\n  '┼',\n  '┴',\n  '┐',\n  '┤',\n  '┘',\n  '─',\n  '│',\n]\n// up right down left\nconst BOX_CHARS_PROPS: Record<BoxChar, number> = {\n  '┌': 0b0110,\n  '├': 0b1110,\n  '└': 0b1100,\n  '┬': 0b0111,\n  '┼': 0b1111,\n  '┴': 0b1101,\n  '┐': 0b0011,\n  '┤': 0b1011,\n  '┘': 0b1001,\n  '─': 0b0101,\n  '│': 0b1010,\n}\nconst BOX_CHARS_FROM_PROPS: Record<number, BoxChar> = {\n  0b0110: '┌',\n  0b1110: '├',\n  0b1100: '└',\n  0b0111: '┬',\n  0b1111: '┼',\n  0b1101: '┴',\n  0b0011: '┐',\n  0b1011: '┤',\n  0b1001: '┘',\n  0b0101: '─',\n  0b1010: '│',\n}\nconst isBoxChar = (char: Char): boolean => BOX_CHARS.includes(char as BoxChar)\n\nfunction App() {\n  const [startPoint, setStartPoint] = useState<Point>()\n  const [endPoint, setEndPoint] = useState<Point>()\n  const [selectedPoint, setSelectedPoint] = useState<Point>()\n\n  const [shiftKeyPressed, setShiftKeyPressed] = useState(false)\n  const [altKeyPressed, setAltKeyPressed] = useState(false)\n  const [table, setTable ] = useState<string[][]>(INITIAL_TABLE)\n\n  const mergeChars = (char1: Char, char2: BoxChar): Char => {\n    if (!isBoxChar(char1)) {\n      return !shiftKeyPressed || char1 === ' '\n        ? char2\n        : char1\n    }\n    return BOX_CHARS_FROM_PROPS[\n      BOX_CHARS_PROPS[char1 as BoxChar] | BOX_CHARS_PROPS[char2]\n    ]\n  }\n  const getChar = (point: Point, char: Char) => {\n    if (!startPoint || !endPoint) {\n      return char\n    }\n\n    const boxChars: BoxChar[][] = [\n      ['┌','─','┐'],\n      ['│','┼','│'],\n      ['└','─','┘'],\n    ]\n    if (\n      point.y >= startPoint.y && point.y <= endPoint.y\n      && point.x >= startPoint.x && point.x <= endPoint.x\n    ) {\n      if (point.x === startPoint.x && point.y === startPoint.y) {\n        return mergeChars(char, boxChars[0][0])\n      }\n      if (point.x === startPoint.x && point.y === endPoint.y) {\n        return mergeChars(char, boxChars[2][0])\n      }\n\n      if (point.x === endPoint.x && point.y === startPoint.y) {\n        return mergeChars(char, boxChars[0][2])\n      }\n      if (point.x === endPoint.x && point.y === endPoint.y) {\n        return mergeChars(char, boxChars[2][2])\n      }\n\n      if (\n        (point.x === startPoint.x || point.x === endPoint.x)\n        && point.y < endPoint.y\n      ) {\n        return mergeChars(char, '│')\n      }\n      if (\n        (point.y === startPoint.y || point.y === endPoint.y)\n        && point.x < endPoint.x\n      ) {\n        return mergeChars(char, '─')\n      }\n    }\n    return char\n  }\n\n  const handleOnMouseDown = (point: Point) => {\n    setStartPoint(point)\n  }\n  const handleOnMouseOver = (point: Point, evt: BxdMouseEvent) => {\n    if (startPoint) {\n      setEndPoint(point)\n    }\n  }\n  const handleOnMouseUp = (point: Point) => {\n    if (isPointEqual(startPoint, point)) {\n      setSelectedPoint(point)\n    } else {\n      setTable(table.map((row, y) => row.map(\n        (char, x) => getChar({x,y}, char)\n      )))\n    }\n    \n    setStartPoint(undefined)\n    setEndPoint(undefined)\n  }\n\n  const handleOnDblClick = (point: Point) => {\n    isPointEqual(point, selectedPoint)\n      ? setSelectedPoint(undefined)\n      : setSelectedPoint(point)\n  }\n\n  const handleOnKeyDown = (evt: React.KeyboardEvent) => {\n    evt.preventDefault()\n    console.log(evt.key)\n    if (evt.key === 'Shift') {\n      setShiftKeyPressed(true)\n    }\n    if (evt.key === 'Alt') {\n      setAltKeyPressed(true)\n    }\n  }\n\n  const handleOnKeyUp = (evt: React.KeyboardEvent) => {\n    evt.preventDefault()\n    if (evt.key === 'Shift') {\n      setShiftKeyPressed(false)\n    }\n    if (evt.key === 'Alt') {\n      setAltKeyPressed(false)\n    }\n\n    if (!selectedPoint) {\n      return\n    }\n\n\n    if (evt.key === 'Delete' || evt.key === 'Backspace' || evt.key === 'ArrowLeft') {\n      setSelectedPoint({\n        y: selectedPoint.y,\n        x: selectedPoint.x - 1,\n      })\n      return\n    }\n\n    if (evt.key === 'ArrowRight') {\n      setSelectedPoint({\n        y: selectedPoint.y,\n        x: selectedPoint.x + 1,\n      })\n      return\n    }\n\n    if (evt.key === 'ArrowUp') {\n      setSelectedPoint({\n        y: selectedPoint.y - 1,\n        x: selectedPoint.x,\n      })\n      return\n    }\n\n    if (evt.key === 'ArrowDown') {\n      setSelectedPoint({\n        y: selectedPoint.y + 1,\n        x: selectedPoint.x,\n      })\n      return\n    }\n\n    const ignoredKeys = ['Enter', 'Shift', 'Alt']\n\n    if (!ignoredKeys.includes(evt.key)) {\n\n      const t2 = [\n        ...table,\n      ]\n      t2[selectedPoint.y][selectedPoint.x] = evt.key\n      setTable(t2)\n      setSelectedPoint({\n        y: selectedPoint.y,\n        x: selectedPoint.x + 1\n      })\n      console.log(t2.reduce(\n        (acc, line) => acc + '\\n' + line.join(''),\n        ''\n      ))\n    }\n  }\n\n  return (\n    <div tabIndex={1} onKeyDown={handleOnKeyDown} onKeyUp={handleOnKeyUp}>\n      <Stage width={window.innerWidth} height={window.innerHeight} onKey>\n        <Layer>\n          {table.map((row, y) => row.map((char, x) => (\n            <Cell\n              char={getChar({x, y}, char)} point={{x, y}}\n              selected={isPointEqual({x, y}, selectedPoint)}\n              onMouseDown={handleOnMouseDown}\n              onMouseOver={handleOnMouseOver}\n              onMouseUp={handleOnMouseUp}\n              onDblClick={handleOnDblClick}\n            />))\n          )}\n        </Layer>\n      </Stage>\n    </div>\n\n        // <pre>\n        // ┌───────────────────┐ {'\\n'}\n        // │  ╔═══╗ Some Text  │▒{'\\n'}\n        // │  ╚═╦═╝ in the box │▒{'\\n'}\n        // ╞═╤══╩══╤═══════════╡▒{'\\n'}\n        // │ ├──┬──┤           │▒{'\\n'}\n        // │ └──┴──┘           │▒{'\\n'}\n        // └───────────────────┘▒{'\\n'}\n        // </pre>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}